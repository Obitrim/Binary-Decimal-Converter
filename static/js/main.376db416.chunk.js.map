{"version":3,"sources":["assets/bg.jpg","components/ConverterInput/index.js","components/ConverterOutput/index.js","pages/App/index.js","reportWebVitals.js","index.js"],"names":["ConverterInput","value","onChange","props","className","type","ConverterOutput","result","App","useState","mode","setMode","userInput","setUserInput","getResult","setResult","trim","binary","test","parseInt","decimal","exponent","Math","floor","toDecimal","toBinary","useEffect","tmp","toString","src","bgImg","alt","evt","target","placeholder","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAAe,G,MAAA,IAA0B,gC,6BCe1BA,EAZQ,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAaC,EAAY,oCACxD,OACE,mCACCC,UAAU,iBACVC,KAAK,SACLJ,MAAOA,EACPC,SAAUA,GACNC,KCDMG,G,MANS,SAACH,GACvB,OACE,wBAAQC,UAAU,kBAAlB,SAAqCD,EAAMI,WCsEhCC,EAnEH,SAACL,GAAW,IAAD,EACEM,mBAAS,OADX,mBACfC,EADe,KACTC,EADS,OAEYF,mBAAS,IAFrB,mBAEfG,EAFe,KAEJC,EAFI,OAGMJ,mBAASK,KAHf,mBAGfP,EAHe,KAGPQ,EAHO,OAI4BN,oBAAS,GAJrC,6BAmCtB,SAASK,IACR,MAAyB,KAArBF,EAAUI,OAAuB,GAErB,QAATN,EAhCR,SAAmBO,GAClB,GAAI,QAAQC,KAAR,UAAgBD,IAAW,MAAO,GAEtCA,EAASE,SAASF,GAGf,IAFA,IAAIG,EAAU,EACVC,EAAW,EACRJ,EAAS,GACZG,GAAYH,EAAS,GAAV,SAAiB,EAAGI,GAC/BA,GAAY,EACZJ,EAASK,KAAKC,MAAMN,EAAS,IAEjC,OAAOG,EAqBcI,CAAUZ,GAlBnC,SAAkBQ,GACjB,IAAIH,EAAS,GACbG,EAAUD,SAASC,GAEhB,GACIH,EAASG,EAAU,EAAIH,EACvBG,EAAUE,KAAKC,MAAMH,EAAU,SAC1BA,EAAU,GACnB,OAAOD,SAASF,GAU4BQ,CAASb,GAazD,OAVAc,qBAAU,WACTX,EAAUD,OACR,CAACF,IAEJc,qBAAU,WACT,IAAIC,EAAMf,EACVC,EAAaN,EAAOqB,YACpBb,EAAUY,KACR,CAACjB,IAGH,uBAAMN,UAAU,aAAhB,UACC,qBAAKyB,IAAKC,EAAOC,IAAI,mBACrB,yBAAQ3B,UAAU,YAAlB,UACC,0DACA,2GAED,0BAASA,UAAU,MAAnB,UACC,cAAC,EAAD,CAAgBF,SA5BnB,SAAwB8B,GACvBnB,EAAamB,EAAIC,OAAOhC,QA2BoBiC,YAAW,gBAAoB,QAATxB,EAAiB,SAAW,UAAvC,mBAAmET,MAAOW,IAC/H,wBAAQR,UAAU,cAAc+B,QAAS,kBAAMxB,EAAiB,QAATD,EAAiB,MAAQ,QAAhF,SAAyFA,IACzF,cAAC,EAAD,CAAiBH,OAAQA,WCzDd6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.376db416.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.d0a46162.jpg\";","import React from 'react';\r\nimport \"./ConverterInput.css\";\r\n\r\nconst ConverterInput = ({ value, onChange, ...props }) => {\r\n  return (\r\n    <input \r\n    \tclassName=\"ConverterInput\"\r\n    \ttype=\"number\" \r\n    \tvalue={value} \r\n    \tonChange={onChange} \r\n    \t{...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ConverterInput;","import React from 'react';\r\nimport \"./ConverterOutput.css\";\r\n\r\nconst ConverterOutput = (props) => {\r\n  return (\r\n    <output className=\"ConverterOutput\">{props.result}</output>\r\n  )\r\n}\r\n\r\nexport default ConverterOutput;","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nimport \"./App.css\";\r\nimport bgImg from \"../../assets/bg.jpg\";\r\nimport ConverterInput from \"../../components/ConverterInput\";\r\nimport ConverterOutput from \"../../components/ConverterOutput\";\r\n\r\nconst App = (props) => {\r\n\tconst [mode, setMode] = useState(\"B2D\");\r\n\tconst [userInput, setUserInput] = useState(\"\");\r\n\tconst [result, setResult] = useState(getResult());\r\n\tconst [invalidDigitError, setInvalidDigitError] = useState(false);\r\n\r\n\tfunction toDecimal(binary) {\r\n\t\tif (/[2-9]/.test(`${binary}`)) return \"\";\r\n\r\n\t\tbinary = parseInt(binary);\r\n\t    let decimal = 0;\r\n\t    let exponent = 0;\r\n\t    while (binary > 0) {\r\n\t        decimal += (binary % 10) * (2**exponent);\r\n\t        exponent += 1;\r\n\t        binary = Math.floor(binary / 10);\r\n\t    }\r\n\t    return decimal;\r\n\t}\r\n\r\n\tfunction toBinary(decimal) {\r\n\t\tlet binary = \"\";\r\n\t\tdecimal = parseInt(decimal);\r\n\r\n\t    do {\r\n\t        binary = decimal % 2 + binary;\r\n\t        decimal = Math.floor(decimal / 2);\r\n\t    } while (decimal > 0);\r\n\t    return parseInt(binary);\r\n\t}\r\n\r\n\tfunction handleOnChange(evt) {\r\n\t\tsetUserInput(evt.target.value);\r\n\t}\r\n\r\n\tfunction getResult() {\r\n\t\tif (userInput.trim() === \"\" ) return \"\";\r\n\r\n\t\treturn mode === \"B2D\" ? toDecimal(userInput) : toBinary(userInput);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tsetResult(getResult());\r\n\t}, [userInput])\r\n\r\n\tuseEffect(() => {\r\n\t\tlet tmp = userInput;\r\n\t\tsetUserInput(result.toString());\r\n\t\tsetResult(tmp);\r\n\t}, [mode]);\r\n\r\n\treturn (\r\n\t\t<main className=\"AppWrapper\">\r\n\t\t\t<img src={bgImg} alt=\"binary numbers\" />\r\n\t\t\t<header className=\"AppHeader\">\r\n\t\t\t\t<h1>Binary Decimal Converter</h1>\r\n\t\t\t\t<p>Convert Base two numerals to Base ten numerals and vice versa with ease</p>\r\n\t\t\t</header>\r\n\t\t\t<section className=\"App\">\r\n\t\t\t\t<ConverterInput onChange={handleOnChange} placeholder={`Enter ${mode === \"B2D\" ? \"binary\" : \"decimal\"} number here...`} value={userInput} />\r\n\t\t\t\t<button className=\"App__Switch\" onClick={() => setMode(mode === \"B2D\" ? \"D2B\" : \"B2D\")}>{mode}</button>\r\n\t\t\t\t<ConverterOutput result={result} />\r\n\t\t\t</section>\r\n\t\t</main>\r\n\t)\r\n}\r\n\r\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}